apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "guestbook-backend.fullname" . }}
  labels:
    {{- include "guestbook-backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "guestbook-backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "guestbook-backend.selectorLabels" . | nindent 8 }}
      {{- if .Values.metrics.enabled }}
      annotations:
        {{- range $key, $value := .Values.metrics.annotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      {{- if .Values.initContainer.enabled }}
      initContainers:
        - name: init-db-ready
          image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
          command: ['/bin/sh', '-c']
          args:
            - echo "Waiting for mongodb at {{ .Values.env.guestbookDbAddr }} to go live before the BE..."; 
            - until (mongo --host {{ .Values.env.guestbookDbAddr }} >/dev/null) do echo "Waiting for connection for 2 sec."; sleep 2; done
      {{- end }}
      containers:
        - name: backend
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http-server
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: PORT
              value: {{ .Values.env.port | quote }}
            {{- if .Values.mongodb.existingSecret }}
            - name: GUESTBOOK_DB_ADDR
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.existingSecret }}
                  key: {{ .Values.mongodb.connectionKey }}
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.existingSecret }}
                  key: {{ .Values.mongodb.usernameKey }}
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.existingSecret }}
                  key: {{ .Values.mongodb.passwordKey }}
            - name: MONGODB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.existingSecret }}
                  key: {{ .Values.mongodb.databaseKey }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}