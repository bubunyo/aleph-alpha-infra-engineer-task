apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mongodb.fullname" . }}
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "mongodb.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "mongodb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "mongodb.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: mongodb
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: mongodb
              containerPort: 27017
              protocol: TCP
          env:
            {{- if .Values.auth.enabled }}
            {{- if .Values.auth.existingSecret }}
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: {{ .Values.auth.rootUsernameKey }}
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: {{ .Values.auth.rootPasswordKey }}
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: {{ .Values.auth.databaseKey }}
            # Additional user credentials for application
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: {{ .Values.auth.usernameKey }}
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: {{ .Values.auth.passwordKey }}
            - name: MONGODB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: {{ .Values.auth.databaseKey }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data/db
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: init-script
          configMap:
            name: {{ include "mongodb.fullname" . }}-init
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "mongodb.labels" . | nindent 10 }}
      spec:
        accessModes: [ "{{ .Values.persistence.accessMode }}" ]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- end }}